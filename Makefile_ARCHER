CXX := CC

#GEODECOMP_DIR := /Users/aproeme/libgeodecomp/9529db
GEODECOMP_DIR := /home/ecse1321/ecse1321/aproeme9/libgeodecomp/hail-caesar
GEODECOMP_SRC_DIR := /home/ecse1321/ecse1321/aproeme9/libgeodecomp/libgeodecomp
#GEODECOMP_SRC_DIR := /Users/aproeme/libgeodecomp/libgeodecomp-0.4.0

BOOST_DIR := /work/y07/y07/cse/boost/1.60_MPI/GNU/boost

# CC := clang --analyze # and comment out the linker last line for sanity
GITREV = -D'GIT_REVISION="$(shell git log --pretty=format:'%h' -n 1)"'
SRCDIR := src
BUILDDIR := build

SRCEXT := cpp
SOURCES := $(shell find $(SRCDIR) -type f -name *.$(SRCEXT))
OBJECTS := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SOURCES:.$(SRCEXT)=.o))
CFLAGS := -g -fopenmp -std=c++11 $(GITREV) -Wfatal-errors #-O3 or -O2  REMEMBER TO TURN THIS BACK ON BEFORE RUNNING PRODUCTION
INC := -I . -I ./include -I./include/libgeodecomp -I $(GEODECOMP_DIR)/include -I $(BOOST_DIR)/include  
LDFLAGS := -fopenmp -L $(GEODECOMP_DIR)/lib -L $(BOOST_DIR)/lib 
LIBS := -lgeodecomp -lboost_date_time

TYPEMAP_TEST_OBJECTS := src/catchmentmodel/LSDCatchmentModel.o src/libgeodecomp/typemaps.o test/typemaptest.o

ifeq ($(PARALLEL),TRUE)
  build_mode := parallel
  TARGET := bin/HAIL-CAESAR.mpi
  CFLAGS += -DCOMPILE_FOR_PARALLEL
else
  build_mode := serial
  TARGET := bin/HAIL-CAESAR.serial
  CFLAGS += -DCOMPILE_FOR_SERIAL
endif




$(TARGET): $(OBJECTS) 
	@echo " \n Linking... \n"
	@echo " $(CXX) $(LDFLAGS) $(INC) $(LIBS) $^ -o $(TARGET)"; $(CXX) $(LDFLAGS) $(INC) $(LIBS) $^ -o $(TARGET) 

typemaptest: $(TYPEMAP_TEST_OBJECTS) $(OBJECTS)
	@echo " \n Linking... \n"
	@echo " $(CXX) $(LDFLAGS) $(INC) $(LIBS) $(TYPEMAP_SRC_OBJECTS) -o bin/typemaptest"; $(CXX) $(LDFLAGS) $(INC) $(LIBS) $(TYPEMAP_TEST_OBJECTS) -o bin/typemaptest

typemaptest.o : test/typemaptest.cpp include/catchmentmodel/LSDCatchmentModel.hpp include/libgeodecomp/typemaps.h
	@echo " $(CXX) $(CFLAGS) $(INC) -c -o test/typemaptest.o test/typemaptest.cpp"; $(CXX) $(CFLAGS) $(INC) -c -o test/typemaptest.o test/typemaptest.cpp

$(BUILDDIR)/%.o: $(SRCDIR)/%.$(SRCEXT) 
	@mkdir -p bin
	@mkdir -p $(BUILDDIR)/topotools
	@mkdir -p $(BUILDDIR)/catchmentmodel
	@mkdir -p $(BUILDDIR)/libgeodecomp
	@echo " $(CXX) $(CFLAGS) $(INC) -c -o $@ $<"; $(CXX) $(CFLAGS) $(INC) -c -o $@ $<

typemaps: # only necessary to generate new MPI typemaps run if the model has been changed, not needed during normal build process
	@echo " Removing existing typemaps... "; echo "rm -rf include/libgeodecomp/* src/libgeodecomp/*"; rm -rf include/libgeodecomp/* src/libgeodecomp/*
	@echo " Removing existing xml..."; echo "rm -rf typemaps-doxygen-docs"; rm -rf typemaps-doxygen-docs
	@echo " Regenerating xml..."; echo "doxygen doxygen.conf"; doxygen doxygen.conf
	@echo " Regenerating typemaps...";
	@echo "mkdir typemaps"; mkdir typemaps
	@echo "generate.rb -S typemaps-doxygen-docs/xml typemaps"
	@$(GEODECOMP_SRC_DIR)/tools/typemapgenerator/generate.rb -S typemaps-doxygen-docs/xml typemaps
	@echo "mv typemaps/*.h include/libgeodecomp/"; mv typemaps/*.h include/libgeodecomp/
	@echo "mv typemaps/*.cpp src/libgeodecomp/"; mv typemaps/*.cpp src/libgeodecomp/
	@echo "rm -r typemaps"; rm -rf typemaps
	@echo " Done"

print_build_mode:
	@echo "\n Building $(build_mode) version of HAIL-CAESAR \n" 

clean:
	@echo " Cleaning..."; 
	@echo " $(RM) -rf $(BUILDDIR) $(TARGET) typemaps typemaps-doxygen-docs"; $(RM) -r $(BUILDDIR) $(TARGET) typemaps typemaps-doxygen-docs

# Tests
tester:
	$(CXX) $(CFLAGS) test/tester.cpp $(INC) $(LIBS) -o bin/tester

# Spikes
ticket:
	$(CXX) $(CFLAGS) spikes/ticket.cpp $(INC) $(LIBS) -o bin/ticket

.PHONY: clean
